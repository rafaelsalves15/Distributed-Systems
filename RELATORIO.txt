R1: Operação shareWithOthers (7 valores)

    Auto-avaliação: 7/7

    -O objetivo do Requisito R1 é estender o projeto com uma operação adicional chamada shareWithOthers. 
    -Para adicionar a operação shareWithOthers foram feitas alterações ao proto User original 
    ( foram adicionados os novos tipos de mensagem ShareWithOthersRequest e ShareWithOthersResponse e extendido o serviço adequadamente)

    -Criada exceção para o caso em que User introduz um valor de percentagem que não está entre 1-100
    -Criada exceção para o caso em que User tenta partilhar dinheiro mas não tem dinheiro na conta
    
    -Foi também criada a operação ShareWithOthersOP.


    Neste requisito foi assumido:

    1 - Que a distribuição equitativa do dinheiro consideraria o broker. Ou seja, num caso em que haja duas contas criadas (Alice e Bob),
     se Alice fizar a opoeração de shareWithOthers o dinheiro irá ser dividido igualmente por duas contas - Bob e broker. 
    
    2 - Em casos com divisão decimal foi convertido o valor decimal para inteiro. 



R2: Replicação com coerência fraca (7 valores)

    Auto-avaliação: 6/7

    -No requisito 2 o serviço passou a ser fornecido por dois servidores (A e B)
    -Conexão ao servidor feita no UserService pela função "connect"

    -Para adicionar a operação gossip foi alterado o proto do Admin. 
    
    A ideia da operação gossip foi implementada da seguinte maneira :
        
        -Admin faz gossip server (sendo 'server' o servidor com as atualizações que queremos propagar - ou seja, se fizer gossip A o
         servidor B será atualizado ) ;
        -É obitdo o ledger do servidor que tem as operações feitas nesse servidor;
        - Servidor contrário vai percorrer o ledger e executar as operações
    
    
    -Criadas classes CrossServerService e CrossServerServiceImpl (e respetivo proto) onde fazemos a propagação do estado entre servidores.
    -Função propagateState que faz a conexão ao servidor para o qual queremos propagar o estado atualizado e envia-lhe o ledger com o qual faremos
    as atualizações.

    


R3: Assinatura digital de mensagens (6 valores)
    
    Auto-avaliação: 3/6

    - Neste requisito foi pedido uma assinatura digital de chave pública porém só foi implementada a parte em que se faz
    assinatura digital da mensagem e a parte de  cifrar/decifrar a mensagem com a chave privada tal como está feito no guia laboratorial
    sobre segurança.

    -A chave secreta está guardada num ficheiro chamado 'secret.key' na pasta 'resources' tanto do lado do User como do Server.
    - (IMPORTANTE) Para aceder a esta chave é usado o path absoluto do meu computador, logo para testar em outros computadores será necessário
    alterar o path
    
    - Caso se queira pode-se dar print no terminal se a assinatura da mensagem é valida.Para isto basta tirar de comentário os prints nas 
    funções verifyShareWithOthersSignature, verifyTransferToSignature , verifyCreateAccountSignature e verifyBalanceSignature do UserService.

